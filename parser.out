Created by PLY version 3.4 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> command
Rule 1     command -> sql_statement
Rule 2     command -> sql_statement SEMICOLON
Rule 3     sql_statement -> select_statement
Rule 4     sql_statement -> insert_statement
Rule 5     sql_statement -> delete_statement
Rule 6     select_statement -> SELECT projection FROM NAME WHERE or_predicate
Rule 7     select_statement -> SELECT projection FROM NAME
Rule 8     insert_statement -> INSERT INTO NAME OBJECT JSON
Rule 9     delete_statement -> DELETE FROM NAME WHERE or_predicate
Rule 10    delete_statement -> DELETE FROM NAME
Rule 11    projection -> STAR
Rule 12    projection -> project_list
Rule 13    project_list -> project_list COMMA attribute_key
Rule 14    project_list -> attribute_key
Rule 15    attribute_key -> attribute_key DOT NAME
Rule 16    attribute_key -> attribute_key BRACKET_LEFT UINT BRACKET_RIGHT
Rule 17    attribute_key -> NAME
Rule 18    bool_comparison_op -> EQ
Rule 19    bool_comparison_op -> NEQ
Rule 20    num_comparison_op -> bool_comparison_op
Rule 21    num_comparison_op -> LT
Rule 22    num_comparison_op -> LEQ
Rule 23    num_comparison_op -> GT
Rule 24    num_comparison_op -> GEQ
Rule 25    str_comparison_op -> num_comparison_op
Rule 26    str_comparison_op -> LIKE
Rule 27    str_comparison_op -> NOT LIKE
Rule 28    bool_val -> TRUE
Rule 29    bool_val -> FALSE
Rule 30    num_val -> FLOATVAL
Rule 31    num_val -> UINT
Rule 32    str_val -> QUOTED_STRING
Rule 33    simple_bool_predicate -> attribute_key bool_comparison_op bool_val
Rule 34    simple_bool_predicate -> bool_val bool_comparison_op attribute_key
Rule 35    simple_bool_predicate -> ANY attribute_key bool_comparison_op bool_val
Rule 36    simple_bool_predicate -> bool_val bool_comparison_op ANY attribute_key
Rule 37    simple_num_predicate -> attribute_key num_comparison_op num_val
Rule 38    simple_num_predicate -> num_val num_comparison_op attribute_key
Rule 39    simple_num_predicate -> ANY attribute_key num_comparison_op num_val
Rule 40    simple_num_predicate -> num_val num_comparison_op ANY attribute_key
Rule 41    simple_str_predicate_left -> attribute_key str_comparison_op str_val
Rule 42    simple_str_predicate_left -> ANY attribute_key str_comparison_op str_val
Rule 43    simple_str_predicate_right -> str_val str_comparison_op attribute_key
Rule 44    simple_str_predicate_right -> str_val str_comparison_op ANY attribute_key
Rule 45    simple_str_predicate -> simple_str_predicate_left
Rule 46    simple_str_predicate -> simple_str_predicate_right
Rule 47    simple_predicate -> simple_bool_predicate
Rule 48    simple_predicate -> simple_num_predicate
Rule 49    simple_predicate -> simple_str_predicate
Rule 50    predicate_base -> simple_predicate
Rule 51    predicate_base -> PAREN_LEFT or_predicate PAREN_RIGHT
Rule 52    not_predicate -> NOT predicate_base
Rule 53    not_predicate -> predicate_base
Rule 54    and_predicate -> and_predicate AND not_predicate
Rule 55    and_predicate -> not_predicate
Rule 56    or_predicate -> or_predicate OR and_predicate
Rule 57    or_predicate -> and_predicate

Terminals, with rules where they appear

AND                  : 54
ANY                  : 35 36 39 40 42 44
BRACKET_LEFT         : 16
BRACKET_RIGHT        : 16
COMMA                : 13
DELETE               : 9 10
DOT                  : 15
EQ                   : 18
FALSE                : 29
FLOATVAL             : 30
FROM                 : 6 7 9 10
GEQ                  : 24
GT                   : 23
INSERT               : 8
INTO                 : 8
JSON                 : 8
LEQ                  : 22
LIKE                 : 26 27
LT                   : 21
NAME                 : 6 7 8 9 10 15 17
NEQ                  : 19
NOT                  : 27 52
OBJECT               : 8
OR                   : 56
PAREN_LEFT           : 51
PAREN_RIGHT          : 51
QUOTED_STRING        : 32
SELECT               : 6 7
SEMICOLON            : 2
STAR                 : 11
TRUE                 : 28
UINT                 : 16 31
WHERE                : 6 9
error                : 

Nonterminals, with rules where they appear

and_predicate        : 54 56 57
attribute_key        : 13 14 15 16 33 34 35 36 37 38 39 40 41 42 43 44
bool_comparison_op   : 20 33 34 35 36
bool_val             : 33 34 35 36
command              : 0
delete_statement     : 5
insert_statement     : 4
not_predicate        : 54 55
num_comparison_op    : 25 37 38 39 40
num_val              : 37 38 39 40
or_predicate         : 6 9 51 56
predicate_base       : 52 53
project_list         : 12 13
projection           : 6 7
select_statement     : 3
simple_bool_predicate : 47
simple_num_predicate : 48
simple_predicate     : 50
simple_str_predicate : 49
simple_str_predicate_left : 45
simple_str_predicate_right : 46
sql_statement        : 1 2
str_comparison_op    : 41 42 43 44
str_val              : 41 42 43 44

Parsing method: LALR

state 0

    (0) S' -> . command
    (1) command -> . sql_statement
    (2) command -> . sql_statement SEMICOLON
    (3) sql_statement -> . select_statement
    (4) sql_statement -> . insert_statement
    (5) sql_statement -> . delete_statement
    (6) select_statement -> . SELECT projection FROM NAME WHERE or_predicate
    (7) select_statement -> . SELECT projection FROM NAME
    (8) insert_statement -> . INSERT INTO NAME OBJECT JSON
    (9) delete_statement -> . DELETE FROM NAME WHERE or_predicate
    (10) delete_statement -> . DELETE FROM NAME

    SELECT          shift and go to state 8
    INSERT          shift and go to state 1
    DELETE          shift and go to state 6

    sql_statement                  shift and go to state 2
    select_statement               shift and go to state 3
    delete_statement               shift and go to state 4
    command                        shift and go to state 5
    insert_statement               shift and go to state 7

state 1

    (8) insert_statement -> INSERT . INTO NAME OBJECT JSON

    INTO            shift and go to state 9


state 2

    (1) command -> sql_statement .
    (2) command -> sql_statement . SEMICOLON

    $end            reduce using rule 1 (command -> sql_statement .)
    SEMICOLON       shift and go to state 10


state 3

    (3) sql_statement -> select_statement .

    SEMICOLON       reduce using rule 3 (sql_statement -> select_statement .)
    $end            reduce using rule 3 (sql_statement -> select_statement .)


state 4

    (5) sql_statement -> delete_statement .

    SEMICOLON       reduce using rule 5 (sql_statement -> delete_statement .)
    $end            reduce using rule 5 (sql_statement -> delete_statement .)


state 5

    (0) S' -> command .



state 6

    (9) delete_statement -> DELETE . FROM NAME WHERE or_predicate
    (10) delete_statement -> DELETE . FROM NAME

    FROM            shift and go to state 11


state 7

    (4) sql_statement -> insert_statement .

    SEMICOLON       reduce using rule 4 (sql_statement -> insert_statement .)
    $end            reduce using rule 4 (sql_statement -> insert_statement .)


state 8

    (6) select_statement -> SELECT . projection FROM NAME WHERE or_predicate
    (7) select_statement -> SELECT . projection FROM NAME
    (11) projection -> . STAR
    (12) projection -> . project_list
    (13) project_list -> . project_list COMMA attribute_key
    (14) project_list -> . attribute_key
    (15) attribute_key -> . attribute_key DOT NAME
    (16) attribute_key -> . attribute_key BRACKET_LEFT UINT BRACKET_RIGHT
    (17) attribute_key -> . NAME

    STAR            shift and go to state 15
    NAME            shift and go to state 16

    attribute_key                  shift and go to state 12
    project_list                   shift and go to state 13
    projection                     shift and go to state 14

state 9

    (8) insert_statement -> INSERT INTO . NAME OBJECT JSON

    NAME            shift and go to state 17


state 10

    (2) command -> sql_statement SEMICOLON .

    $end            reduce using rule 2 (command -> sql_statement SEMICOLON .)


state 11

    (9) delete_statement -> DELETE FROM . NAME WHERE or_predicate
    (10) delete_statement -> DELETE FROM . NAME

    NAME            shift and go to state 18


state 12

    (14) project_list -> attribute_key .
    (15) attribute_key -> attribute_key . DOT NAME
    (16) attribute_key -> attribute_key . BRACKET_LEFT UINT BRACKET_RIGHT

    COMMA           reduce using rule 14 (project_list -> attribute_key .)
    FROM            reduce using rule 14 (project_list -> attribute_key .)
    DOT             shift and go to state 20
    BRACKET_LEFT    shift and go to state 19


state 13

    (12) projection -> project_list .
    (13) project_list -> project_list . COMMA attribute_key

    FROM            reduce using rule 12 (projection -> project_list .)
    COMMA           shift and go to state 21


state 14

    (6) select_statement -> SELECT projection . FROM NAME WHERE or_predicate
    (7) select_statement -> SELECT projection . FROM NAME

    FROM            shift and go to state 22


state 15

    (11) projection -> STAR .

    FROM            reduce using rule 11 (projection -> STAR .)


state 16

    (17) attribute_key -> NAME .

    DOT             reduce using rule 17 (attribute_key -> NAME .)
    BRACKET_LEFT    reduce using rule 17 (attribute_key -> NAME .)
    AND             reduce using rule 17 (attribute_key -> NAME .)
    OR              reduce using rule 17 (attribute_key -> NAME .)
    SEMICOLON       reduce using rule 17 (attribute_key -> NAME .)
    $end            reduce using rule 17 (attribute_key -> NAME .)
    PAREN_RIGHT     reduce using rule 17 (attribute_key -> NAME .)
    EQ              reduce using rule 17 (attribute_key -> NAME .)
    NEQ             reduce using rule 17 (attribute_key -> NAME .)
    LT              reduce using rule 17 (attribute_key -> NAME .)
    LEQ             reduce using rule 17 (attribute_key -> NAME .)
    GT              reduce using rule 17 (attribute_key -> NAME .)
    GEQ             reduce using rule 17 (attribute_key -> NAME .)
    LIKE            reduce using rule 17 (attribute_key -> NAME .)
    NOT             reduce using rule 17 (attribute_key -> NAME .)
    COMMA           reduce using rule 17 (attribute_key -> NAME .)
    FROM            reduce using rule 17 (attribute_key -> NAME .)


state 17

    (8) insert_statement -> INSERT INTO NAME . OBJECT JSON

    OBJECT          shift and go to state 23


state 18

    (9) delete_statement -> DELETE FROM NAME . WHERE or_predicate
    (10) delete_statement -> DELETE FROM NAME .

    WHERE           shift and go to state 24
    SEMICOLON       reduce using rule 10 (delete_statement -> DELETE FROM NAME .)
    $end            reduce using rule 10 (delete_statement -> DELETE FROM NAME .)


state 19

    (16) attribute_key -> attribute_key BRACKET_LEFT . UINT BRACKET_RIGHT

    UINT            shift and go to state 25


state 20

    (15) attribute_key -> attribute_key DOT . NAME

    NAME            shift and go to state 26


state 21

    (13) project_list -> project_list COMMA . attribute_key
    (15) attribute_key -> . attribute_key DOT NAME
    (16) attribute_key -> . attribute_key BRACKET_LEFT UINT BRACKET_RIGHT
    (17) attribute_key -> . NAME

    NAME            shift and go to state 16

    attribute_key                  shift and go to state 27

state 22

    (6) select_statement -> SELECT projection FROM . NAME WHERE or_predicate
    (7) select_statement -> SELECT projection FROM . NAME

    NAME            shift and go to state 28


state 23

    (8) insert_statement -> INSERT INTO NAME OBJECT . JSON

    JSON            shift and go to state 29


state 24

    (9) delete_statement -> DELETE FROM NAME WHERE . or_predicate
    (56) or_predicate -> . or_predicate OR and_predicate
    (57) or_predicate -> . and_predicate
    (54) and_predicate -> . and_predicate AND not_predicate
    (55) and_predicate -> . not_predicate
    (52) not_predicate -> . NOT predicate_base
    (53) not_predicate -> . predicate_base
    (50) predicate_base -> . simple_predicate
    (51) predicate_base -> . PAREN_LEFT or_predicate PAREN_RIGHT
    (47) simple_predicate -> . simple_bool_predicate
    (48) simple_predicate -> . simple_num_predicate
    (49) simple_predicate -> . simple_str_predicate
    (33) simple_bool_predicate -> . attribute_key bool_comparison_op bool_val
    (34) simple_bool_predicate -> . bool_val bool_comparison_op attribute_key
    (35) simple_bool_predicate -> . ANY attribute_key bool_comparison_op bool_val
    (36) simple_bool_predicate -> . bool_val bool_comparison_op ANY attribute_key
    (37) simple_num_predicate -> . attribute_key num_comparison_op num_val
    (38) simple_num_predicate -> . num_val num_comparison_op attribute_key
    (39) simple_num_predicate -> . ANY attribute_key num_comparison_op num_val
    (40) simple_num_predicate -> . num_val num_comparison_op ANY attribute_key
    (45) simple_str_predicate -> . simple_str_predicate_left
    (46) simple_str_predicate -> . simple_str_predicate_right
    (15) attribute_key -> . attribute_key DOT NAME
    (16) attribute_key -> . attribute_key BRACKET_LEFT UINT BRACKET_RIGHT
    (17) attribute_key -> . NAME
    (28) bool_val -> . TRUE
    (29) bool_val -> . FALSE
    (30) num_val -> . FLOATVAL
    (31) num_val -> . UINT
    (41) simple_str_predicate_left -> . attribute_key str_comparison_op str_val
    (42) simple_str_predicate_left -> . ANY attribute_key str_comparison_op str_val
    (43) simple_str_predicate_right -> . str_val str_comparison_op attribute_key
    (44) simple_str_predicate_right -> . str_val str_comparison_op ANY attribute_key
    (32) str_val -> . QUOTED_STRING

    NOT             shift and go to state 50
    PAREN_LEFT      shift and go to state 43
    ANY             shift and go to state 51
    NAME            shift and go to state 16
    TRUE            shift and go to state 34
    FALSE           shift and go to state 41
    FLOATVAL        shift and go to state 37
    UINT            shift and go to state 39
    QUOTED_STRING   shift and go to state 35

    attribute_key                  shift and go to state 44
    simple_bool_predicate          shift and go to state 45
    and_predicate                  shift and go to state 46
    simple_str_predicate_left      shift and go to state 30
    simple_predicate               shift and go to state 31
    simple_num_predicate           shift and go to state 47
    not_predicate                  shift and go to state 48
    predicate_base                 shift and go to state 36
    bool_val                       shift and go to state 49
    or_predicate                   shift and go to state 40
    str_val                        shift and go to state 38
    num_val                        shift and go to state 33
    simple_str_predicate           shift and go to state 42
    simple_str_predicate_right     shift and go to state 32

state 25

    (16) attribute_key -> attribute_key BRACKET_LEFT UINT . BRACKET_RIGHT

    BRACKET_RIGHT   shift and go to state 52


state 26

    (15) attribute_key -> attribute_key DOT NAME .

    DOT             reduce using rule 15 (attribute_key -> attribute_key DOT NAME .)
    BRACKET_LEFT    reduce using rule 15 (attribute_key -> attribute_key DOT NAME .)
    AND             reduce using rule 15 (attribute_key -> attribute_key DOT NAME .)
    OR              reduce using rule 15 (attribute_key -> attribute_key DOT NAME .)
    SEMICOLON       reduce using rule 15 (attribute_key -> attribute_key DOT NAME .)
    $end            reduce using rule 15 (attribute_key -> attribute_key DOT NAME .)
    PAREN_RIGHT     reduce using rule 15 (attribute_key -> attribute_key DOT NAME .)
    EQ              reduce using rule 15 (attribute_key -> attribute_key DOT NAME .)
    NEQ             reduce using rule 15 (attribute_key -> attribute_key DOT NAME .)
    LT              reduce using rule 15 (attribute_key -> attribute_key DOT NAME .)
    LEQ             reduce using rule 15 (attribute_key -> attribute_key DOT NAME .)
    GT              reduce using rule 15 (attribute_key -> attribute_key DOT NAME .)
    GEQ             reduce using rule 15 (attribute_key -> attribute_key DOT NAME .)
    LIKE            reduce using rule 15 (attribute_key -> attribute_key DOT NAME .)
    NOT             reduce using rule 15 (attribute_key -> attribute_key DOT NAME .)
    COMMA           reduce using rule 15 (attribute_key -> attribute_key DOT NAME .)
    FROM            reduce using rule 15 (attribute_key -> attribute_key DOT NAME .)


state 27

    (13) project_list -> project_list COMMA attribute_key .
    (15) attribute_key -> attribute_key . DOT NAME
    (16) attribute_key -> attribute_key . BRACKET_LEFT UINT BRACKET_RIGHT

    COMMA           reduce using rule 13 (project_list -> project_list COMMA attribute_key .)
    FROM            reduce using rule 13 (project_list -> project_list COMMA attribute_key .)
    DOT             shift and go to state 20
    BRACKET_LEFT    shift and go to state 19


state 28

    (6) select_statement -> SELECT projection FROM NAME . WHERE or_predicate
    (7) select_statement -> SELECT projection FROM NAME .

    WHERE           shift and go to state 53
    SEMICOLON       reduce using rule 7 (select_statement -> SELECT projection FROM NAME .)
    $end            reduce using rule 7 (select_statement -> SELECT projection FROM NAME .)


state 29

    (8) insert_statement -> INSERT INTO NAME OBJECT JSON .

    SEMICOLON       reduce using rule 8 (insert_statement -> INSERT INTO NAME OBJECT JSON .)
    $end            reduce using rule 8 (insert_statement -> INSERT INTO NAME OBJECT JSON .)


state 30

    (45) simple_str_predicate -> simple_str_predicate_left .

    AND             reduce using rule 45 (simple_str_predicate -> simple_str_predicate_left .)
    OR              reduce using rule 45 (simple_str_predicate -> simple_str_predicate_left .)
    SEMICOLON       reduce using rule 45 (simple_str_predicate -> simple_str_predicate_left .)
    $end            reduce using rule 45 (simple_str_predicate -> simple_str_predicate_left .)
    PAREN_RIGHT     reduce using rule 45 (simple_str_predicate -> simple_str_predicate_left .)


state 31

    (50) predicate_base -> simple_predicate .

    AND             reduce using rule 50 (predicate_base -> simple_predicate .)
    OR              reduce using rule 50 (predicate_base -> simple_predicate .)
    SEMICOLON       reduce using rule 50 (predicate_base -> simple_predicate .)
    $end            reduce using rule 50 (predicate_base -> simple_predicate .)
    PAREN_RIGHT     reduce using rule 50 (predicate_base -> simple_predicate .)


state 32

    (46) simple_str_predicate -> simple_str_predicate_right .

    AND             reduce using rule 46 (simple_str_predicate -> simple_str_predicate_right .)
    OR              reduce using rule 46 (simple_str_predicate -> simple_str_predicate_right .)
    SEMICOLON       reduce using rule 46 (simple_str_predicate -> simple_str_predicate_right .)
    $end            reduce using rule 46 (simple_str_predicate -> simple_str_predicate_right .)
    PAREN_RIGHT     reduce using rule 46 (simple_str_predicate -> simple_str_predicate_right .)


state 33

    (38) simple_num_predicate -> num_val . num_comparison_op attribute_key
    (40) simple_num_predicate -> num_val . num_comparison_op ANY attribute_key
    (20) num_comparison_op -> . bool_comparison_op
    (21) num_comparison_op -> . LT
    (22) num_comparison_op -> . LEQ
    (23) num_comparison_op -> . GT
    (24) num_comparison_op -> . GEQ
    (18) bool_comparison_op -> . EQ
    (19) bool_comparison_op -> . NEQ

    LT              shift and go to state 58
    LEQ             shift and go to state 57
    GT              shift and go to state 55
    GEQ             shift and go to state 54
    EQ              shift and go to state 60
    NEQ             shift and go to state 61

    bool_comparison_op             shift and go to state 56
    num_comparison_op              shift and go to state 59

state 34

    (28) bool_val -> TRUE .

    EQ              reduce using rule 28 (bool_val -> TRUE .)
    NEQ             reduce using rule 28 (bool_val -> TRUE .)
    AND             reduce using rule 28 (bool_val -> TRUE .)
    OR              reduce using rule 28 (bool_val -> TRUE .)
    SEMICOLON       reduce using rule 28 (bool_val -> TRUE .)
    $end            reduce using rule 28 (bool_val -> TRUE .)
    PAREN_RIGHT     reduce using rule 28 (bool_val -> TRUE .)


state 35

    (32) str_val -> QUOTED_STRING .

    LIKE            reduce using rule 32 (str_val -> QUOTED_STRING .)
    NOT             reduce using rule 32 (str_val -> QUOTED_STRING .)
    LT              reduce using rule 32 (str_val -> QUOTED_STRING .)
    LEQ             reduce using rule 32 (str_val -> QUOTED_STRING .)
    GT              reduce using rule 32 (str_val -> QUOTED_STRING .)
    GEQ             reduce using rule 32 (str_val -> QUOTED_STRING .)
    EQ              reduce using rule 32 (str_val -> QUOTED_STRING .)
    NEQ             reduce using rule 32 (str_val -> QUOTED_STRING .)
    AND             reduce using rule 32 (str_val -> QUOTED_STRING .)
    OR              reduce using rule 32 (str_val -> QUOTED_STRING .)
    SEMICOLON       reduce using rule 32 (str_val -> QUOTED_STRING .)
    $end            reduce using rule 32 (str_val -> QUOTED_STRING .)
    PAREN_RIGHT     reduce using rule 32 (str_val -> QUOTED_STRING .)


state 36

    (53) not_predicate -> predicate_base .

    AND             reduce using rule 53 (not_predicate -> predicate_base .)
    OR              reduce using rule 53 (not_predicate -> predicate_base .)
    SEMICOLON       reduce using rule 53 (not_predicate -> predicate_base .)
    $end            reduce using rule 53 (not_predicate -> predicate_base .)
    PAREN_RIGHT     reduce using rule 53 (not_predicate -> predicate_base .)


state 37

    (30) num_val -> FLOATVAL .

    AND             reduce using rule 30 (num_val -> FLOATVAL .)
    OR              reduce using rule 30 (num_val -> FLOATVAL .)
    SEMICOLON       reduce using rule 30 (num_val -> FLOATVAL .)
    $end            reduce using rule 30 (num_val -> FLOATVAL .)
    PAREN_RIGHT     reduce using rule 30 (num_val -> FLOATVAL .)
    LT              reduce using rule 30 (num_val -> FLOATVAL .)
    LEQ             reduce using rule 30 (num_val -> FLOATVAL .)
    GT              reduce using rule 30 (num_val -> FLOATVAL .)
    GEQ             reduce using rule 30 (num_val -> FLOATVAL .)
    EQ              reduce using rule 30 (num_val -> FLOATVAL .)
    NEQ             reduce using rule 30 (num_val -> FLOATVAL .)


state 38

    (43) simple_str_predicate_right -> str_val . str_comparison_op attribute_key
    (44) simple_str_predicate_right -> str_val . str_comparison_op ANY attribute_key
    (25) str_comparison_op -> . num_comparison_op
    (26) str_comparison_op -> . LIKE
    (27) str_comparison_op -> . NOT LIKE
    (20) num_comparison_op -> . bool_comparison_op
    (21) num_comparison_op -> . LT
    (22) num_comparison_op -> . LEQ
    (23) num_comparison_op -> . GT
    (24) num_comparison_op -> . GEQ
    (18) bool_comparison_op -> . EQ
    (19) bool_comparison_op -> . NEQ

    LIKE            shift and go to state 62
    NOT             shift and go to state 64
    LT              shift and go to state 58
    LEQ             shift and go to state 57
    GT              shift and go to state 55
    GEQ             shift and go to state 54
    EQ              shift and go to state 60
    NEQ             shift and go to state 61

    bool_comparison_op             shift and go to state 56
    num_comparison_op              shift and go to state 63
    str_comparison_op              shift and go to state 65

state 39

    (31) num_val -> UINT .

    AND             reduce using rule 31 (num_val -> UINT .)
    OR              reduce using rule 31 (num_val -> UINT .)
    SEMICOLON       reduce using rule 31 (num_val -> UINT .)
    $end            reduce using rule 31 (num_val -> UINT .)
    PAREN_RIGHT     reduce using rule 31 (num_val -> UINT .)
    LT              reduce using rule 31 (num_val -> UINT .)
    LEQ             reduce using rule 31 (num_val -> UINT .)
    GT              reduce using rule 31 (num_val -> UINT .)
    GEQ             reduce using rule 31 (num_val -> UINT .)
    EQ              reduce using rule 31 (num_val -> UINT .)
    NEQ             reduce using rule 31 (num_val -> UINT .)


state 40

    (9) delete_statement -> DELETE FROM NAME WHERE or_predicate .
    (56) or_predicate -> or_predicate . OR and_predicate

    SEMICOLON       reduce using rule 9 (delete_statement -> DELETE FROM NAME WHERE or_predicate .)
    $end            reduce using rule 9 (delete_statement -> DELETE FROM NAME WHERE or_predicate .)
    OR              shift and go to state 66


state 41

    (29) bool_val -> FALSE .

    EQ              reduce using rule 29 (bool_val -> FALSE .)
    NEQ             reduce using rule 29 (bool_val -> FALSE .)
    AND             reduce using rule 29 (bool_val -> FALSE .)
    OR              reduce using rule 29 (bool_val -> FALSE .)
    SEMICOLON       reduce using rule 29 (bool_val -> FALSE .)
    $end            reduce using rule 29 (bool_val -> FALSE .)
    PAREN_RIGHT     reduce using rule 29 (bool_val -> FALSE .)


state 42

    (49) simple_predicate -> simple_str_predicate .

    AND             reduce using rule 49 (simple_predicate -> simple_str_predicate .)
    OR              reduce using rule 49 (simple_predicate -> simple_str_predicate .)
    SEMICOLON       reduce using rule 49 (simple_predicate -> simple_str_predicate .)
    $end            reduce using rule 49 (simple_predicate -> simple_str_predicate .)
    PAREN_RIGHT     reduce using rule 49 (simple_predicate -> simple_str_predicate .)


state 43

    (51) predicate_base -> PAREN_LEFT . or_predicate PAREN_RIGHT
    (56) or_predicate -> . or_predicate OR and_predicate
    (57) or_predicate -> . and_predicate
    (54) and_predicate -> . and_predicate AND not_predicate
    (55) and_predicate -> . not_predicate
    (52) not_predicate -> . NOT predicate_base
    (53) not_predicate -> . predicate_base
    (50) predicate_base -> . simple_predicate
    (51) predicate_base -> . PAREN_LEFT or_predicate PAREN_RIGHT
    (47) simple_predicate -> . simple_bool_predicate
    (48) simple_predicate -> . simple_num_predicate
    (49) simple_predicate -> . simple_str_predicate
    (33) simple_bool_predicate -> . attribute_key bool_comparison_op bool_val
    (34) simple_bool_predicate -> . bool_val bool_comparison_op attribute_key
    (35) simple_bool_predicate -> . ANY attribute_key bool_comparison_op bool_val
    (36) simple_bool_predicate -> . bool_val bool_comparison_op ANY attribute_key
    (37) simple_num_predicate -> . attribute_key num_comparison_op num_val
    (38) simple_num_predicate -> . num_val num_comparison_op attribute_key
    (39) simple_num_predicate -> . ANY attribute_key num_comparison_op num_val
    (40) simple_num_predicate -> . num_val num_comparison_op ANY attribute_key
    (45) simple_str_predicate -> . simple_str_predicate_left
    (46) simple_str_predicate -> . simple_str_predicate_right
    (15) attribute_key -> . attribute_key DOT NAME
    (16) attribute_key -> . attribute_key BRACKET_LEFT UINT BRACKET_RIGHT
    (17) attribute_key -> . NAME
    (28) bool_val -> . TRUE
    (29) bool_val -> . FALSE
    (30) num_val -> . FLOATVAL
    (31) num_val -> . UINT
    (41) simple_str_predicate_left -> . attribute_key str_comparison_op str_val
    (42) simple_str_predicate_left -> . ANY attribute_key str_comparison_op str_val
    (43) simple_str_predicate_right -> . str_val str_comparison_op attribute_key
    (44) simple_str_predicate_right -> . str_val str_comparison_op ANY attribute_key
    (32) str_val -> . QUOTED_STRING

    NOT             shift and go to state 50
    PAREN_LEFT      shift and go to state 43
    ANY             shift and go to state 51
    NAME            shift and go to state 16
    TRUE            shift and go to state 34
    FALSE           shift and go to state 41
    FLOATVAL        shift and go to state 37
    UINT            shift and go to state 39
    QUOTED_STRING   shift and go to state 35

    attribute_key                  shift and go to state 44
    simple_bool_predicate          shift and go to state 45
    and_predicate                  shift and go to state 46
    simple_str_predicate_left      shift and go to state 30
    simple_predicate               shift and go to state 31
    simple_num_predicate           shift and go to state 47
    not_predicate                  shift and go to state 48
    predicate_base                 shift and go to state 36
    bool_val                       shift and go to state 49
    or_predicate                   shift and go to state 67
    str_val                        shift and go to state 38
    num_val                        shift and go to state 33
    simple_str_predicate           shift and go to state 42
    simple_str_predicate_right     shift and go to state 32

state 44

    (33) simple_bool_predicate -> attribute_key . bool_comparison_op bool_val
    (37) simple_num_predicate -> attribute_key . num_comparison_op num_val
    (15) attribute_key -> attribute_key . DOT NAME
    (16) attribute_key -> attribute_key . BRACKET_LEFT UINT BRACKET_RIGHT
    (41) simple_str_predicate_left -> attribute_key . str_comparison_op str_val
    (18) bool_comparison_op -> . EQ
    (19) bool_comparison_op -> . NEQ
    (20) num_comparison_op -> . bool_comparison_op
    (21) num_comparison_op -> . LT
    (22) num_comparison_op -> . LEQ
    (23) num_comparison_op -> . GT
    (24) num_comparison_op -> . GEQ
    (25) str_comparison_op -> . num_comparison_op
    (26) str_comparison_op -> . LIKE
    (27) str_comparison_op -> . NOT LIKE

    DOT             shift and go to state 20
    BRACKET_LEFT    shift and go to state 19
    EQ              shift and go to state 60
    NEQ             shift and go to state 61
    LT              shift and go to state 58
    LEQ             shift and go to state 57
    GT              shift and go to state 55
    GEQ             shift and go to state 54
    LIKE            shift and go to state 62
    NOT             shift and go to state 64

    bool_comparison_op             shift and go to state 68
    num_comparison_op              shift and go to state 69
    str_comparison_op              shift and go to state 70

state 45

    (47) simple_predicate -> simple_bool_predicate .

    AND             reduce using rule 47 (simple_predicate -> simple_bool_predicate .)
    OR              reduce using rule 47 (simple_predicate -> simple_bool_predicate .)
    SEMICOLON       reduce using rule 47 (simple_predicate -> simple_bool_predicate .)
    $end            reduce using rule 47 (simple_predicate -> simple_bool_predicate .)
    PAREN_RIGHT     reduce using rule 47 (simple_predicate -> simple_bool_predicate .)


state 46

    (57) or_predicate -> and_predicate .
    (54) and_predicate -> and_predicate . AND not_predicate

    OR              reduce using rule 57 (or_predicate -> and_predicate .)
    SEMICOLON       reduce using rule 57 (or_predicate -> and_predicate .)
    $end            reduce using rule 57 (or_predicate -> and_predicate .)
    PAREN_RIGHT     reduce using rule 57 (or_predicate -> and_predicate .)
    AND             shift and go to state 71


state 47

    (48) simple_predicate -> simple_num_predicate .

    AND             reduce using rule 48 (simple_predicate -> simple_num_predicate .)
    OR              reduce using rule 48 (simple_predicate -> simple_num_predicate .)
    SEMICOLON       reduce using rule 48 (simple_predicate -> simple_num_predicate .)
    $end            reduce using rule 48 (simple_predicate -> simple_num_predicate .)
    PAREN_RIGHT     reduce using rule 48 (simple_predicate -> simple_num_predicate .)


state 48

    (55) and_predicate -> not_predicate .

    AND             reduce using rule 55 (and_predicate -> not_predicate .)
    OR              reduce using rule 55 (and_predicate -> not_predicate .)
    SEMICOLON       reduce using rule 55 (and_predicate -> not_predicate .)
    $end            reduce using rule 55 (and_predicate -> not_predicate .)
    PAREN_RIGHT     reduce using rule 55 (and_predicate -> not_predicate .)


state 49

    (34) simple_bool_predicate -> bool_val . bool_comparison_op attribute_key
    (36) simple_bool_predicate -> bool_val . bool_comparison_op ANY attribute_key
    (18) bool_comparison_op -> . EQ
    (19) bool_comparison_op -> . NEQ

    EQ              shift and go to state 60
    NEQ             shift and go to state 61

    bool_comparison_op             shift and go to state 72

state 50

    (52) not_predicate -> NOT . predicate_base
    (50) predicate_base -> . simple_predicate
    (51) predicate_base -> . PAREN_LEFT or_predicate PAREN_RIGHT
    (47) simple_predicate -> . simple_bool_predicate
    (48) simple_predicate -> . simple_num_predicate
    (49) simple_predicate -> . simple_str_predicate
    (33) simple_bool_predicate -> . attribute_key bool_comparison_op bool_val
    (34) simple_bool_predicate -> . bool_val bool_comparison_op attribute_key
    (35) simple_bool_predicate -> . ANY attribute_key bool_comparison_op bool_val
    (36) simple_bool_predicate -> . bool_val bool_comparison_op ANY attribute_key
    (37) simple_num_predicate -> . attribute_key num_comparison_op num_val
    (38) simple_num_predicate -> . num_val num_comparison_op attribute_key
    (39) simple_num_predicate -> . ANY attribute_key num_comparison_op num_val
    (40) simple_num_predicate -> . num_val num_comparison_op ANY attribute_key
    (45) simple_str_predicate -> . simple_str_predicate_left
    (46) simple_str_predicate -> . simple_str_predicate_right
    (15) attribute_key -> . attribute_key DOT NAME
    (16) attribute_key -> . attribute_key BRACKET_LEFT UINT BRACKET_RIGHT
    (17) attribute_key -> . NAME
    (28) bool_val -> . TRUE
    (29) bool_val -> . FALSE
    (30) num_val -> . FLOATVAL
    (31) num_val -> . UINT
    (41) simple_str_predicate_left -> . attribute_key str_comparison_op str_val
    (42) simple_str_predicate_left -> . ANY attribute_key str_comparison_op str_val
    (43) simple_str_predicate_right -> . str_val str_comparison_op attribute_key
    (44) simple_str_predicate_right -> . str_val str_comparison_op ANY attribute_key
    (32) str_val -> . QUOTED_STRING

    PAREN_LEFT      shift and go to state 43
    ANY             shift and go to state 51
    NAME            shift and go to state 16
    TRUE            shift and go to state 34
    FALSE           shift and go to state 41
    FLOATVAL        shift and go to state 37
    UINT            shift and go to state 39
    QUOTED_STRING   shift and go to state 35

    attribute_key                  shift and go to state 44
    simple_bool_predicate          shift and go to state 45
    simple_str_predicate_left      shift and go to state 30
    simple_predicate               shift and go to state 31
    simple_num_predicate           shift and go to state 47
    predicate_base                 shift and go to state 73
    bool_val                       shift and go to state 49
    str_val                        shift and go to state 38
    num_val                        shift and go to state 33
    simple_str_predicate           shift and go to state 42
    simple_str_predicate_right     shift and go to state 32

state 51

    (35) simple_bool_predicate -> ANY . attribute_key bool_comparison_op bool_val
    (39) simple_num_predicate -> ANY . attribute_key num_comparison_op num_val
    (42) simple_str_predicate_left -> ANY . attribute_key str_comparison_op str_val
    (15) attribute_key -> . attribute_key DOT NAME
    (16) attribute_key -> . attribute_key BRACKET_LEFT UINT BRACKET_RIGHT
    (17) attribute_key -> . NAME

    NAME            shift and go to state 16

    attribute_key                  shift and go to state 74

state 52

    (16) attribute_key -> attribute_key BRACKET_LEFT UINT BRACKET_RIGHT .

    DOT             reduce using rule 16 (attribute_key -> attribute_key BRACKET_LEFT UINT BRACKET_RIGHT .)
    BRACKET_LEFT    reduce using rule 16 (attribute_key -> attribute_key BRACKET_LEFT UINT BRACKET_RIGHT .)
    AND             reduce using rule 16 (attribute_key -> attribute_key BRACKET_LEFT UINT BRACKET_RIGHT .)
    OR              reduce using rule 16 (attribute_key -> attribute_key BRACKET_LEFT UINT BRACKET_RIGHT .)
    SEMICOLON       reduce using rule 16 (attribute_key -> attribute_key BRACKET_LEFT UINT BRACKET_RIGHT .)
    $end            reduce using rule 16 (attribute_key -> attribute_key BRACKET_LEFT UINT BRACKET_RIGHT .)
    PAREN_RIGHT     reduce using rule 16 (attribute_key -> attribute_key BRACKET_LEFT UINT BRACKET_RIGHT .)
    EQ              reduce using rule 16 (attribute_key -> attribute_key BRACKET_LEFT UINT BRACKET_RIGHT .)
    NEQ             reduce using rule 16 (attribute_key -> attribute_key BRACKET_LEFT UINT BRACKET_RIGHT .)
    LT              reduce using rule 16 (attribute_key -> attribute_key BRACKET_LEFT UINT BRACKET_RIGHT .)
    LEQ             reduce using rule 16 (attribute_key -> attribute_key BRACKET_LEFT UINT BRACKET_RIGHT .)
    GT              reduce using rule 16 (attribute_key -> attribute_key BRACKET_LEFT UINT BRACKET_RIGHT .)
    GEQ             reduce using rule 16 (attribute_key -> attribute_key BRACKET_LEFT UINT BRACKET_RIGHT .)
    LIKE            reduce using rule 16 (attribute_key -> attribute_key BRACKET_LEFT UINT BRACKET_RIGHT .)
    NOT             reduce using rule 16 (attribute_key -> attribute_key BRACKET_LEFT UINT BRACKET_RIGHT .)
    COMMA           reduce using rule 16 (attribute_key -> attribute_key BRACKET_LEFT UINT BRACKET_RIGHT .)
    FROM            reduce using rule 16 (attribute_key -> attribute_key BRACKET_LEFT UINT BRACKET_RIGHT .)


state 53

    (6) select_statement -> SELECT projection FROM NAME WHERE . or_predicate
    (56) or_predicate -> . or_predicate OR and_predicate
    (57) or_predicate -> . and_predicate
    (54) and_predicate -> . and_predicate AND not_predicate
    (55) and_predicate -> . not_predicate
    (52) not_predicate -> . NOT predicate_base
    (53) not_predicate -> . predicate_base
    (50) predicate_base -> . simple_predicate
    (51) predicate_base -> . PAREN_LEFT or_predicate PAREN_RIGHT
    (47) simple_predicate -> . simple_bool_predicate
    (48) simple_predicate -> . simple_num_predicate
    (49) simple_predicate -> . simple_str_predicate
    (33) simple_bool_predicate -> . attribute_key bool_comparison_op bool_val
    (34) simple_bool_predicate -> . bool_val bool_comparison_op attribute_key
    (35) simple_bool_predicate -> . ANY attribute_key bool_comparison_op bool_val
    (36) simple_bool_predicate -> . bool_val bool_comparison_op ANY attribute_key
    (37) simple_num_predicate -> . attribute_key num_comparison_op num_val
    (38) simple_num_predicate -> . num_val num_comparison_op attribute_key
    (39) simple_num_predicate -> . ANY attribute_key num_comparison_op num_val
    (40) simple_num_predicate -> . num_val num_comparison_op ANY attribute_key
    (45) simple_str_predicate -> . simple_str_predicate_left
    (46) simple_str_predicate -> . simple_str_predicate_right
    (15) attribute_key -> . attribute_key DOT NAME
    (16) attribute_key -> . attribute_key BRACKET_LEFT UINT BRACKET_RIGHT
    (17) attribute_key -> . NAME
    (28) bool_val -> . TRUE
    (29) bool_val -> . FALSE
    (30) num_val -> . FLOATVAL
    (31) num_val -> . UINT
    (41) simple_str_predicate_left -> . attribute_key str_comparison_op str_val
    (42) simple_str_predicate_left -> . ANY attribute_key str_comparison_op str_val
    (43) simple_str_predicate_right -> . str_val str_comparison_op attribute_key
    (44) simple_str_predicate_right -> . str_val str_comparison_op ANY attribute_key
    (32) str_val -> . QUOTED_STRING

    NOT             shift and go to state 50
    PAREN_LEFT      shift and go to state 43
    ANY             shift and go to state 51
    NAME            shift and go to state 16
    TRUE            shift and go to state 34
    FALSE           shift and go to state 41
    FLOATVAL        shift and go to state 37
    UINT            shift and go to state 39
    QUOTED_STRING   shift and go to state 35

    attribute_key                  shift and go to state 44
    simple_bool_predicate          shift and go to state 45
    and_predicate                  shift and go to state 46
    simple_str_predicate_left      shift and go to state 30
    simple_predicate               shift and go to state 31
    simple_num_predicate           shift and go to state 47
    not_predicate                  shift and go to state 48
    predicate_base                 shift and go to state 36
    bool_val                       shift and go to state 49
    or_predicate                   shift and go to state 75
    str_val                        shift and go to state 38
    num_val                        shift and go to state 33
    simple_str_predicate           shift and go to state 42
    simple_str_predicate_right     shift and go to state 32

state 54

    (24) num_comparison_op -> GEQ .

    FLOATVAL        reduce using rule 24 (num_comparison_op -> GEQ .)
    UINT            reduce using rule 24 (num_comparison_op -> GEQ .)
    QUOTED_STRING   reduce using rule 24 (num_comparison_op -> GEQ .)
    ANY             reduce using rule 24 (num_comparison_op -> GEQ .)
    NAME            reduce using rule 24 (num_comparison_op -> GEQ .)


state 55

    (23) num_comparison_op -> GT .

    FLOATVAL        reduce using rule 23 (num_comparison_op -> GT .)
    UINT            reduce using rule 23 (num_comparison_op -> GT .)
    QUOTED_STRING   reduce using rule 23 (num_comparison_op -> GT .)
    ANY             reduce using rule 23 (num_comparison_op -> GT .)
    NAME            reduce using rule 23 (num_comparison_op -> GT .)


state 56

    (20) num_comparison_op -> bool_comparison_op .

    ANY             reduce using rule 20 (num_comparison_op -> bool_comparison_op .)
    NAME            reduce using rule 20 (num_comparison_op -> bool_comparison_op .)


state 57

    (22) num_comparison_op -> LEQ .

    FLOATVAL        reduce using rule 22 (num_comparison_op -> LEQ .)
    UINT            reduce using rule 22 (num_comparison_op -> LEQ .)
    QUOTED_STRING   reduce using rule 22 (num_comparison_op -> LEQ .)
    ANY             reduce using rule 22 (num_comparison_op -> LEQ .)
    NAME            reduce using rule 22 (num_comparison_op -> LEQ .)


state 58

    (21) num_comparison_op -> LT .

    FLOATVAL        reduce using rule 21 (num_comparison_op -> LT .)
    UINT            reduce using rule 21 (num_comparison_op -> LT .)
    QUOTED_STRING   reduce using rule 21 (num_comparison_op -> LT .)
    ANY             reduce using rule 21 (num_comparison_op -> LT .)
    NAME            reduce using rule 21 (num_comparison_op -> LT .)


state 59

    (38) simple_num_predicate -> num_val num_comparison_op . attribute_key
    (40) simple_num_predicate -> num_val num_comparison_op . ANY attribute_key
    (15) attribute_key -> . attribute_key DOT NAME
    (16) attribute_key -> . attribute_key BRACKET_LEFT UINT BRACKET_RIGHT
    (17) attribute_key -> . NAME

    ANY             shift and go to state 77
    NAME            shift and go to state 16

    attribute_key                  shift and go to state 76

state 60

    (18) bool_comparison_op -> EQ .

    TRUE            reduce using rule 18 (bool_comparison_op -> EQ .)
    FALSE           reduce using rule 18 (bool_comparison_op -> EQ .)
    FLOATVAL        reduce using rule 18 (bool_comparison_op -> EQ .)
    UINT            reduce using rule 18 (bool_comparison_op -> EQ .)
    QUOTED_STRING   reduce using rule 18 (bool_comparison_op -> EQ .)
    ANY             reduce using rule 18 (bool_comparison_op -> EQ .)
    NAME            reduce using rule 18 (bool_comparison_op -> EQ .)


state 61

    (19) bool_comparison_op -> NEQ .

    TRUE            reduce using rule 19 (bool_comparison_op -> NEQ .)
    FALSE           reduce using rule 19 (bool_comparison_op -> NEQ .)
    FLOATVAL        reduce using rule 19 (bool_comparison_op -> NEQ .)
    UINT            reduce using rule 19 (bool_comparison_op -> NEQ .)
    QUOTED_STRING   reduce using rule 19 (bool_comparison_op -> NEQ .)
    ANY             reduce using rule 19 (bool_comparison_op -> NEQ .)
    NAME            reduce using rule 19 (bool_comparison_op -> NEQ .)


state 62

    (26) str_comparison_op -> LIKE .

    ANY             reduce using rule 26 (str_comparison_op -> LIKE .)
    NAME            reduce using rule 26 (str_comparison_op -> LIKE .)
    QUOTED_STRING   reduce using rule 26 (str_comparison_op -> LIKE .)


state 63

    (25) str_comparison_op -> num_comparison_op .

    ANY             reduce using rule 25 (str_comparison_op -> num_comparison_op .)
    NAME            reduce using rule 25 (str_comparison_op -> num_comparison_op .)


state 64

    (27) str_comparison_op -> NOT . LIKE

    LIKE            shift and go to state 78


state 65

    (43) simple_str_predicate_right -> str_val str_comparison_op . attribute_key
    (44) simple_str_predicate_right -> str_val str_comparison_op . ANY attribute_key
    (15) attribute_key -> . attribute_key DOT NAME
    (16) attribute_key -> . attribute_key BRACKET_LEFT UINT BRACKET_RIGHT
    (17) attribute_key -> . NAME

    ANY             shift and go to state 80
    NAME            shift and go to state 16

    attribute_key                  shift and go to state 79

state 66

    (56) or_predicate -> or_predicate OR . and_predicate
    (54) and_predicate -> . and_predicate AND not_predicate
    (55) and_predicate -> . not_predicate
    (52) not_predicate -> . NOT predicate_base
    (53) not_predicate -> . predicate_base
    (50) predicate_base -> . simple_predicate
    (51) predicate_base -> . PAREN_LEFT or_predicate PAREN_RIGHT
    (47) simple_predicate -> . simple_bool_predicate
    (48) simple_predicate -> . simple_num_predicate
    (49) simple_predicate -> . simple_str_predicate
    (33) simple_bool_predicate -> . attribute_key bool_comparison_op bool_val
    (34) simple_bool_predicate -> . bool_val bool_comparison_op attribute_key
    (35) simple_bool_predicate -> . ANY attribute_key bool_comparison_op bool_val
    (36) simple_bool_predicate -> . bool_val bool_comparison_op ANY attribute_key
    (37) simple_num_predicate -> . attribute_key num_comparison_op num_val
    (38) simple_num_predicate -> . num_val num_comparison_op attribute_key
    (39) simple_num_predicate -> . ANY attribute_key num_comparison_op num_val
    (40) simple_num_predicate -> . num_val num_comparison_op ANY attribute_key
    (45) simple_str_predicate -> . simple_str_predicate_left
    (46) simple_str_predicate -> . simple_str_predicate_right
    (15) attribute_key -> . attribute_key DOT NAME
    (16) attribute_key -> . attribute_key BRACKET_LEFT UINT BRACKET_RIGHT
    (17) attribute_key -> . NAME
    (28) bool_val -> . TRUE
    (29) bool_val -> . FALSE
    (30) num_val -> . FLOATVAL
    (31) num_val -> . UINT
    (41) simple_str_predicate_left -> . attribute_key str_comparison_op str_val
    (42) simple_str_predicate_left -> . ANY attribute_key str_comparison_op str_val
    (43) simple_str_predicate_right -> . str_val str_comparison_op attribute_key
    (44) simple_str_predicate_right -> . str_val str_comparison_op ANY attribute_key
    (32) str_val -> . QUOTED_STRING

    NOT             shift and go to state 50
    PAREN_LEFT      shift and go to state 43
    ANY             shift and go to state 51
    NAME            shift and go to state 16
    TRUE            shift and go to state 34
    FALSE           shift and go to state 41
    FLOATVAL        shift and go to state 37
    UINT            shift and go to state 39
    QUOTED_STRING   shift and go to state 35

    attribute_key                  shift and go to state 44
    simple_bool_predicate          shift and go to state 45
    and_predicate                  shift and go to state 81
    simple_str_predicate_left      shift and go to state 30
    simple_predicate               shift and go to state 31
    simple_num_predicate           shift and go to state 47
    not_predicate                  shift and go to state 48
    predicate_base                 shift and go to state 36
    bool_val                       shift and go to state 49
    str_val                        shift and go to state 38
    num_val                        shift and go to state 33
    simple_str_predicate           shift and go to state 42
    simple_str_predicate_right     shift and go to state 32

state 67

    (51) predicate_base -> PAREN_LEFT or_predicate . PAREN_RIGHT
    (56) or_predicate -> or_predicate . OR and_predicate

    PAREN_RIGHT     shift and go to state 82
    OR              shift and go to state 66


state 68

    (33) simple_bool_predicate -> attribute_key bool_comparison_op . bool_val
    (20) num_comparison_op -> bool_comparison_op .
    (28) bool_val -> . TRUE
    (29) bool_val -> . FALSE

    FLOATVAL        reduce using rule 20 (num_comparison_op -> bool_comparison_op .)
    UINT            reduce using rule 20 (num_comparison_op -> bool_comparison_op .)
    QUOTED_STRING   reduce using rule 20 (num_comparison_op -> bool_comparison_op .)
    TRUE            shift and go to state 34
    FALSE           shift and go to state 41

    bool_val                       shift and go to state 83

state 69

    (37) simple_num_predicate -> attribute_key num_comparison_op . num_val
    (25) str_comparison_op -> num_comparison_op .
    (30) num_val -> . FLOATVAL
    (31) num_val -> . UINT

    QUOTED_STRING   reduce using rule 25 (str_comparison_op -> num_comparison_op .)
    FLOATVAL        shift and go to state 37
    UINT            shift and go to state 39

    num_val                        shift and go to state 84

state 70

    (41) simple_str_predicate_left -> attribute_key str_comparison_op . str_val
    (32) str_val -> . QUOTED_STRING

    QUOTED_STRING   shift and go to state 35

    str_val                        shift and go to state 85

state 71

    (54) and_predicate -> and_predicate AND . not_predicate
    (52) not_predicate -> . NOT predicate_base
    (53) not_predicate -> . predicate_base
    (50) predicate_base -> . simple_predicate
    (51) predicate_base -> . PAREN_LEFT or_predicate PAREN_RIGHT
    (47) simple_predicate -> . simple_bool_predicate
    (48) simple_predicate -> . simple_num_predicate
    (49) simple_predicate -> . simple_str_predicate
    (33) simple_bool_predicate -> . attribute_key bool_comparison_op bool_val
    (34) simple_bool_predicate -> . bool_val bool_comparison_op attribute_key
    (35) simple_bool_predicate -> . ANY attribute_key bool_comparison_op bool_val
    (36) simple_bool_predicate -> . bool_val bool_comparison_op ANY attribute_key
    (37) simple_num_predicate -> . attribute_key num_comparison_op num_val
    (38) simple_num_predicate -> . num_val num_comparison_op attribute_key
    (39) simple_num_predicate -> . ANY attribute_key num_comparison_op num_val
    (40) simple_num_predicate -> . num_val num_comparison_op ANY attribute_key
    (45) simple_str_predicate -> . simple_str_predicate_left
    (46) simple_str_predicate -> . simple_str_predicate_right
    (15) attribute_key -> . attribute_key DOT NAME
    (16) attribute_key -> . attribute_key BRACKET_LEFT UINT BRACKET_RIGHT
    (17) attribute_key -> . NAME
    (28) bool_val -> . TRUE
    (29) bool_val -> . FALSE
    (30) num_val -> . FLOATVAL
    (31) num_val -> . UINT
    (41) simple_str_predicate_left -> . attribute_key str_comparison_op str_val
    (42) simple_str_predicate_left -> . ANY attribute_key str_comparison_op str_val
    (43) simple_str_predicate_right -> . str_val str_comparison_op attribute_key
    (44) simple_str_predicate_right -> . str_val str_comparison_op ANY attribute_key
    (32) str_val -> . QUOTED_STRING

    NOT             shift and go to state 50
    PAREN_LEFT      shift and go to state 43
    ANY             shift and go to state 51
    NAME            shift and go to state 16
    TRUE            shift and go to state 34
    FALSE           shift and go to state 41
    FLOATVAL        shift and go to state 37
    UINT            shift and go to state 39
    QUOTED_STRING   shift and go to state 35

    attribute_key                  shift and go to state 44
    simple_bool_predicate          shift and go to state 45
    simple_str_predicate_left      shift and go to state 30
    simple_predicate               shift and go to state 31
    simple_num_predicate           shift and go to state 47
    not_predicate                  shift and go to state 86
    predicate_base                 shift and go to state 36
    bool_val                       shift and go to state 49
    str_val                        shift and go to state 38
    num_val                        shift and go to state 33
    simple_str_predicate           shift and go to state 42
    simple_str_predicate_right     shift and go to state 32

state 72

    (34) simple_bool_predicate -> bool_val bool_comparison_op . attribute_key
    (36) simple_bool_predicate -> bool_val bool_comparison_op . ANY attribute_key
    (15) attribute_key -> . attribute_key DOT NAME
    (16) attribute_key -> . attribute_key BRACKET_LEFT UINT BRACKET_RIGHT
    (17) attribute_key -> . NAME

    ANY             shift and go to state 88
    NAME            shift and go to state 16

    attribute_key                  shift and go to state 87

state 73

    (52) not_predicate -> NOT predicate_base .

    AND             reduce using rule 52 (not_predicate -> NOT predicate_base .)
    OR              reduce using rule 52 (not_predicate -> NOT predicate_base .)
    SEMICOLON       reduce using rule 52 (not_predicate -> NOT predicate_base .)
    $end            reduce using rule 52 (not_predicate -> NOT predicate_base .)
    PAREN_RIGHT     reduce using rule 52 (not_predicate -> NOT predicate_base .)


state 74

    (35) simple_bool_predicate -> ANY attribute_key . bool_comparison_op bool_val
    (39) simple_num_predicate -> ANY attribute_key . num_comparison_op num_val
    (42) simple_str_predicate_left -> ANY attribute_key . str_comparison_op str_val
    (15) attribute_key -> attribute_key . DOT NAME
    (16) attribute_key -> attribute_key . BRACKET_LEFT UINT BRACKET_RIGHT
    (18) bool_comparison_op -> . EQ
    (19) bool_comparison_op -> . NEQ
    (20) num_comparison_op -> . bool_comparison_op
    (21) num_comparison_op -> . LT
    (22) num_comparison_op -> . LEQ
    (23) num_comparison_op -> . GT
    (24) num_comparison_op -> . GEQ
    (25) str_comparison_op -> . num_comparison_op
    (26) str_comparison_op -> . LIKE
    (27) str_comparison_op -> . NOT LIKE

    DOT             shift and go to state 20
    BRACKET_LEFT    shift and go to state 19
    EQ              shift and go to state 60
    NEQ             shift and go to state 61
    LT              shift and go to state 58
    LEQ             shift and go to state 57
    GT              shift and go to state 55
    GEQ             shift and go to state 54
    LIKE            shift and go to state 62
    NOT             shift and go to state 64

    bool_comparison_op             shift and go to state 89
    num_comparison_op              shift and go to state 90
    str_comparison_op              shift and go to state 91

state 75

    (6) select_statement -> SELECT projection FROM NAME WHERE or_predicate .
    (56) or_predicate -> or_predicate . OR and_predicate

    SEMICOLON       reduce using rule 6 (select_statement -> SELECT projection FROM NAME WHERE or_predicate .)
    $end            reduce using rule 6 (select_statement -> SELECT projection FROM NAME WHERE or_predicate .)
    OR              shift and go to state 66


state 76

    (38) simple_num_predicate -> num_val num_comparison_op attribute_key .
    (15) attribute_key -> attribute_key . DOT NAME
    (16) attribute_key -> attribute_key . BRACKET_LEFT UINT BRACKET_RIGHT

    AND             reduce using rule 38 (simple_num_predicate -> num_val num_comparison_op attribute_key .)
    OR              reduce using rule 38 (simple_num_predicate -> num_val num_comparison_op attribute_key .)
    SEMICOLON       reduce using rule 38 (simple_num_predicate -> num_val num_comparison_op attribute_key .)
    $end            reduce using rule 38 (simple_num_predicate -> num_val num_comparison_op attribute_key .)
    PAREN_RIGHT     reduce using rule 38 (simple_num_predicate -> num_val num_comparison_op attribute_key .)
    DOT             shift and go to state 20
    BRACKET_LEFT    shift and go to state 19


state 77

    (40) simple_num_predicate -> num_val num_comparison_op ANY . attribute_key
    (15) attribute_key -> . attribute_key DOT NAME
    (16) attribute_key -> . attribute_key BRACKET_LEFT UINT BRACKET_RIGHT
    (17) attribute_key -> . NAME

    NAME            shift and go to state 16

    attribute_key                  shift and go to state 92

state 78

    (27) str_comparison_op -> NOT LIKE .

    ANY             reduce using rule 27 (str_comparison_op -> NOT LIKE .)
    NAME            reduce using rule 27 (str_comparison_op -> NOT LIKE .)
    QUOTED_STRING   reduce using rule 27 (str_comparison_op -> NOT LIKE .)


state 79

    (43) simple_str_predicate_right -> str_val str_comparison_op attribute_key .
    (15) attribute_key -> attribute_key . DOT NAME
    (16) attribute_key -> attribute_key . BRACKET_LEFT UINT BRACKET_RIGHT

    AND             reduce using rule 43 (simple_str_predicate_right -> str_val str_comparison_op attribute_key .)
    OR              reduce using rule 43 (simple_str_predicate_right -> str_val str_comparison_op attribute_key .)
    SEMICOLON       reduce using rule 43 (simple_str_predicate_right -> str_val str_comparison_op attribute_key .)
    $end            reduce using rule 43 (simple_str_predicate_right -> str_val str_comparison_op attribute_key .)
    PAREN_RIGHT     reduce using rule 43 (simple_str_predicate_right -> str_val str_comparison_op attribute_key .)
    DOT             shift and go to state 20
    BRACKET_LEFT    shift and go to state 19


state 80

    (44) simple_str_predicate_right -> str_val str_comparison_op ANY . attribute_key
    (15) attribute_key -> . attribute_key DOT NAME
    (16) attribute_key -> . attribute_key BRACKET_LEFT UINT BRACKET_RIGHT
    (17) attribute_key -> . NAME

    NAME            shift and go to state 16

    attribute_key                  shift and go to state 93

state 81

    (56) or_predicate -> or_predicate OR and_predicate .
    (54) and_predicate -> and_predicate . AND not_predicate

    OR              reduce using rule 56 (or_predicate -> or_predicate OR and_predicate .)
    SEMICOLON       reduce using rule 56 (or_predicate -> or_predicate OR and_predicate .)
    $end            reduce using rule 56 (or_predicate -> or_predicate OR and_predicate .)
    PAREN_RIGHT     reduce using rule 56 (or_predicate -> or_predicate OR and_predicate .)
    AND             shift and go to state 71


state 82

    (51) predicate_base -> PAREN_LEFT or_predicate PAREN_RIGHT .

    AND             reduce using rule 51 (predicate_base -> PAREN_LEFT or_predicate PAREN_RIGHT .)
    OR              reduce using rule 51 (predicate_base -> PAREN_LEFT or_predicate PAREN_RIGHT .)
    SEMICOLON       reduce using rule 51 (predicate_base -> PAREN_LEFT or_predicate PAREN_RIGHT .)
    $end            reduce using rule 51 (predicate_base -> PAREN_LEFT or_predicate PAREN_RIGHT .)
    PAREN_RIGHT     reduce using rule 51 (predicate_base -> PAREN_LEFT or_predicate PAREN_RIGHT .)


state 83

    (33) simple_bool_predicate -> attribute_key bool_comparison_op bool_val .

    AND             reduce using rule 33 (simple_bool_predicate -> attribute_key bool_comparison_op bool_val .)
    OR              reduce using rule 33 (simple_bool_predicate -> attribute_key bool_comparison_op bool_val .)
    SEMICOLON       reduce using rule 33 (simple_bool_predicate -> attribute_key bool_comparison_op bool_val .)
    $end            reduce using rule 33 (simple_bool_predicate -> attribute_key bool_comparison_op bool_val .)
    PAREN_RIGHT     reduce using rule 33 (simple_bool_predicate -> attribute_key bool_comparison_op bool_val .)


state 84

    (37) simple_num_predicate -> attribute_key num_comparison_op num_val .

    AND             reduce using rule 37 (simple_num_predicate -> attribute_key num_comparison_op num_val .)
    OR              reduce using rule 37 (simple_num_predicate -> attribute_key num_comparison_op num_val .)
    SEMICOLON       reduce using rule 37 (simple_num_predicate -> attribute_key num_comparison_op num_val .)
    $end            reduce using rule 37 (simple_num_predicate -> attribute_key num_comparison_op num_val .)
    PAREN_RIGHT     reduce using rule 37 (simple_num_predicate -> attribute_key num_comparison_op num_val .)


state 85

    (41) simple_str_predicate_left -> attribute_key str_comparison_op str_val .

    AND             reduce using rule 41 (simple_str_predicate_left -> attribute_key str_comparison_op str_val .)
    OR              reduce using rule 41 (simple_str_predicate_left -> attribute_key str_comparison_op str_val .)
    SEMICOLON       reduce using rule 41 (simple_str_predicate_left -> attribute_key str_comparison_op str_val .)
    $end            reduce using rule 41 (simple_str_predicate_left -> attribute_key str_comparison_op str_val .)
    PAREN_RIGHT     reduce using rule 41 (simple_str_predicate_left -> attribute_key str_comparison_op str_val .)


state 86

    (54) and_predicate -> and_predicate AND not_predicate .

    AND             reduce using rule 54 (and_predicate -> and_predicate AND not_predicate .)
    OR              reduce using rule 54 (and_predicate -> and_predicate AND not_predicate .)
    SEMICOLON       reduce using rule 54 (and_predicate -> and_predicate AND not_predicate .)
    $end            reduce using rule 54 (and_predicate -> and_predicate AND not_predicate .)
    PAREN_RIGHT     reduce using rule 54 (and_predicate -> and_predicate AND not_predicate .)


state 87

    (34) simple_bool_predicate -> bool_val bool_comparison_op attribute_key .
    (15) attribute_key -> attribute_key . DOT NAME
    (16) attribute_key -> attribute_key . BRACKET_LEFT UINT BRACKET_RIGHT

    AND             reduce using rule 34 (simple_bool_predicate -> bool_val bool_comparison_op attribute_key .)
    OR              reduce using rule 34 (simple_bool_predicate -> bool_val bool_comparison_op attribute_key .)
    SEMICOLON       reduce using rule 34 (simple_bool_predicate -> bool_val bool_comparison_op attribute_key .)
    $end            reduce using rule 34 (simple_bool_predicate -> bool_val bool_comparison_op attribute_key .)
    PAREN_RIGHT     reduce using rule 34 (simple_bool_predicate -> bool_val bool_comparison_op attribute_key .)
    DOT             shift and go to state 20
    BRACKET_LEFT    shift and go to state 19


state 88

    (36) simple_bool_predicate -> bool_val bool_comparison_op ANY . attribute_key
    (15) attribute_key -> . attribute_key DOT NAME
    (16) attribute_key -> . attribute_key BRACKET_LEFT UINT BRACKET_RIGHT
    (17) attribute_key -> . NAME

    NAME            shift and go to state 16

    attribute_key                  shift and go to state 94

state 89

    (35) simple_bool_predicate -> ANY attribute_key bool_comparison_op . bool_val
    (20) num_comparison_op -> bool_comparison_op .
    (28) bool_val -> . TRUE
    (29) bool_val -> . FALSE

    FLOATVAL        reduce using rule 20 (num_comparison_op -> bool_comparison_op .)
    UINT            reduce using rule 20 (num_comparison_op -> bool_comparison_op .)
    QUOTED_STRING   reduce using rule 20 (num_comparison_op -> bool_comparison_op .)
    TRUE            shift and go to state 34
    FALSE           shift and go to state 41

    bool_val                       shift and go to state 95

state 90

    (39) simple_num_predicate -> ANY attribute_key num_comparison_op . num_val
    (25) str_comparison_op -> num_comparison_op .
    (30) num_val -> . FLOATVAL
    (31) num_val -> . UINT

    QUOTED_STRING   reduce using rule 25 (str_comparison_op -> num_comparison_op .)
    FLOATVAL        shift and go to state 37
    UINT            shift and go to state 39

    num_val                        shift and go to state 96

state 91

    (42) simple_str_predicate_left -> ANY attribute_key str_comparison_op . str_val
    (32) str_val -> . QUOTED_STRING

    QUOTED_STRING   shift and go to state 35

    str_val                        shift and go to state 97

state 92

    (40) simple_num_predicate -> num_val num_comparison_op ANY attribute_key .
    (15) attribute_key -> attribute_key . DOT NAME
    (16) attribute_key -> attribute_key . BRACKET_LEFT UINT BRACKET_RIGHT

    AND             reduce using rule 40 (simple_num_predicate -> num_val num_comparison_op ANY attribute_key .)
    OR              reduce using rule 40 (simple_num_predicate -> num_val num_comparison_op ANY attribute_key .)
    SEMICOLON       reduce using rule 40 (simple_num_predicate -> num_val num_comparison_op ANY attribute_key .)
    $end            reduce using rule 40 (simple_num_predicate -> num_val num_comparison_op ANY attribute_key .)
    PAREN_RIGHT     reduce using rule 40 (simple_num_predicate -> num_val num_comparison_op ANY attribute_key .)
    DOT             shift and go to state 20
    BRACKET_LEFT    shift and go to state 19


state 93

    (44) simple_str_predicate_right -> str_val str_comparison_op ANY attribute_key .
    (15) attribute_key -> attribute_key . DOT NAME
    (16) attribute_key -> attribute_key . BRACKET_LEFT UINT BRACKET_RIGHT

    AND             reduce using rule 44 (simple_str_predicate_right -> str_val str_comparison_op ANY attribute_key .)
    OR              reduce using rule 44 (simple_str_predicate_right -> str_val str_comparison_op ANY attribute_key .)
    SEMICOLON       reduce using rule 44 (simple_str_predicate_right -> str_val str_comparison_op ANY attribute_key .)
    $end            reduce using rule 44 (simple_str_predicate_right -> str_val str_comparison_op ANY attribute_key .)
    PAREN_RIGHT     reduce using rule 44 (simple_str_predicate_right -> str_val str_comparison_op ANY attribute_key .)
    DOT             shift and go to state 20
    BRACKET_LEFT    shift and go to state 19


state 94

    (36) simple_bool_predicate -> bool_val bool_comparison_op ANY attribute_key .
    (15) attribute_key -> attribute_key . DOT NAME
    (16) attribute_key -> attribute_key . BRACKET_LEFT UINT BRACKET_RIGHT

    AND             reduce using rule 36 (simple_bool_predicate -> bool_val bool_comparison_op ANY attribute_key .)
    OR              reduce using rule 36 (simple_bool_predicate -> bool_val bool_comparison_op ANY attribute_key .)
    SEMICOLON       reduce using rule 36 (simple_bool_predicate -> bool_val bool_comparison_op ANY attribute_key .)
    $end            reduce using rule 36 (simple_bool_predicate -> bool_val bool_comparison_op ANY attribute_key .)
    PAREN_RIGHT     reduce using rule 36 (simple_bool_predicate -> bool_val bool_comparison_op ANY attribute_key .)
    DOT             shift and go to state 20
    BRACKET_LEFT    shift and go to state 19


state 95

    (35) simple_bool_predicate -> ANY attribute_key bool_comparison_op bool_val .

    AND             reduce using rule 35 (simple_bool_predicate -> ANY attribute_key bool_comparison_op bool_val .)
    OR              reduce using rule 35 (simple_bool_predicate -> ANY attribute_key bool_comparison_op bool_val .)
    SEMICOLON       reduce using rule 35 (simple_bool_predicate -> ANY attribute_key bool_comparison_op bool_val .)
    $end            reduce using rule 35 (simple_bool_predicate -> ANY attribute_key bool_comparison_op bool_val .)
    PAREN_RIGHT     reduce using rule 35 (simple_bool_predicate -> ANY attribute_key bool_comparison_op bool_val .)


state 96

    (39) simple_num_predicate -> ANY attribute_key num_comparison_op num_val .

    AND             reduce using rule 39 (simple_num_predicate -> ANY attribute_key num_comparison_op num_val .)
    OR              reduce using rule 39 (simple_num_predicate -> ANY attribute_key num_comparison_op num_val .)
    SEMICOLON       reduce using rule 39 (simple_num_predicate -> ANY attribute_key num_comparison_op num_val .)
    $end            reduce using rule 39 (simple_num_predicate -> ANY attribute_key num_comparison_op num_val .)
    PAREN_RIGHT     reduce using rule 39 (simple_num_predicate -> ANY attribute_key num_comparison_op num_val .)


state 97

    (42) simple_str_predicate_left -> ANY attribute_key str_comparison_op str_val .

    AND             reduce using rule 42 (simple_str_predicate_left -> ANY attribute_key str_comparison_op str_val .)
    OR              reduce using rule 42 (simple_str_predicate_left -> ANY attribute_key str_comparison_op str_val .)
    SEMICOLON       reduce using rule 42 (simple_str_predicate_left -> ANY attribute_key str_comparison_op str_val .)
    $end            reduce using rule 42 (simple_str_predicate_left -> ANY attribute_key str_comparison_op str_val .)
    PAREN_RIGHT     reduce using rule 42 (simple_str_predicate_left -> ANY attribute_key str_comparison_op str_val .)

